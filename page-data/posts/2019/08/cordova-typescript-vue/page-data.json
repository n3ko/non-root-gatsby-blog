{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/2019/08/cordova-typescript-vue/","result":{"data":{"markdownRemark":{"fields":{"slug":"/2019/08/cordova-typescript-vue/"},"frontmatter":{"title":"Cordova, TypeScript, Vue and using features beyond WebView","tag":["cordova","typescript","vue"],"image":"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS9pgod2gRowruzWDJxQXtxJjS-P4cf3lMYJ-cnqf29fZKQFTQ6"},"correctedDateEpoch":1565197200000,"html":"<p>An easy way to set a layout for mobile apps, easier than <a href=\"https://flutter.dev/\">Flutter</a>, <a href=\"https://facebook.github.io/react-native/\">React Native</a> or <a href=\"https://www.nativescript.org/\">NativeScript</a>, for instance, is to use <a href=\"https://cordova.apache.org/\">Apache Cordova</a> or <a href=\"https://phonegap.com/\">PhoneGap</a>. This is probably due to CSS/SCSS/HTML (rather than partial CSS support in NativeScript).</p>\n<p>Why Vue? Because Vue's <a href=\"https://vuetifyjs.com/en/\">Vuetify</a>'s Material design looks just like Android! While being easier to set the layout than <a href=\"https://nativescript-vue.org/\">NativeScript Vue</a>.</p>\n<p>An example app I have used all the above-mentioned in the header is <a href=\"https://github.com/patarapolw/nltkpass-app\">https://github.com/patarapolw/nltkpass-app</a></p>\n<!-- excerpt_separator -->\n<p>Since I use both Vue-CLI and Apache Cordova, there are two ways to do this.</p>\n<ul>\n<li><code>cordova create app-name</code> followed by <code>vue create app-name</code>, and let the folder merge; and follow the instruction in this tutorial -- <a href=\"https://christos312.eu/blog/2018/11/24/vue-cli-3-cordova/\">https://christos312.eu/blog/2018/11/24/vue-cli-3-cordova/</a></li>\n<li><code>vue create app-name</code> followed by <code>vue add cordova</code>.</li>\n</ul>\n<p>With Vue-CLI it is fairly easy to set up like this (with just an extra <code>vue add pug</code>)</p>\n<pre><code class=\"language-vue\">&#x3C;template lang=\"pug\">\n&#x3C;/template>\n\n&#x3C;script lang=\"ts\">\n&#x3C;/script>\n\n&#x3C;style lang=\"scss\">\n&#x3C;/style>\n</code></pre>\n<p>What feature do I need beyond WebView? I need file server, because a data text file I used is fairly large (20 MB), and Vue-CLI's Webpack wouldn't compile!.</p>\n<p><code>fetch()</code> do work in <code>cordova run browser</code>, but not in <code>cordova run android</code>; so I have to create a custom script.</p>\n<pre><code class=\"language-typescript\">// cordova.ts\nexport async function fetchText(path: string): Promise&#x3C;string> {\n  if ((window as any).cordova &#x26;&#x26; cordova.file) {\n    return new Promise((resolve, reject) => {\n      (window as any).resolveLocalFileSystemURL(`${cordova.file.applicationDirectory}www/${path}`,\n      (fileEntry: any) => {\n        fileEntry.file((f: any) => {\n          const reader = new FileReader();\n          reader.onloadend = function() {\n            resolve(this.result as string);\n          }\n          reader.readAsText(f);\n        })\n      },\n      (e: any) => reject(e));\n    })\n  } else {\n    return (await fetch(path)).text();\n  }\n}\n</code></pre>\n<p>This way, when I use <code>fetchText</code>, instead of <code>await fetch</code>, it will work for Android.</p>\n<p>In my next projects, I would undoubtedly use SQLite, and fetch data from API from an online web server...</p>\n<p>What worries me after this point, is how do I access native Android API from Cordova... It might not be as easy as Flutter?</p>"}},"pageContext":{"slug":"/2019/08/cordova-typescript-vue/"}}}