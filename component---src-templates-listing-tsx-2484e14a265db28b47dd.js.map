{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/layouts/ListingLayout.tsx","webpack:///./src/templates/Listing.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","React","createContext","my1","css","App","nodes","tagName","pagination","className","map","el","fm","frontmatter","title","fields","slug","key","to","moment","correctedDateEpoch","format","image","alt","data-src","dangerouslySetInnerHTML","__html","excerpt","query","Listing","data","pageNumber","pageContext","currentPage","totalCount","allMarkdownRemark","pageCount","Math","ceil","ListingLayout","role","aria-label","disabled","toLocaleString","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"gLAcyBA,QAAOC,QAELC,IAAMC,cAAc,I,kgBCX/C,IAAMC,EAAMC,YAAH,KAwDMC,EAnDH,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,WAAnB,OAKV,mBAAKC,UAAU,WACb,mBAAKA,UAAU,8DACXF,EACA,kBAAIE,UAAU,QAAQL,IAAKD,GAAOI,GAChC,KACFD,EAAMI,KAAI,SAACC,GACX,IAAMC,EAAKD,EAAGE,YACRC,EAAQF,EAAGE,OAASH,EAAGI,OAAOC,KAEpC,OACE,mBAAKC,IAAMH,EAAQL,UAAU,OAAOL,IAAKD,GACvC,mBAAKM,UAAU,gBACb,YAAC,IAAD,CAAMS,GAAE,SAAYP,EAAGI,OAAOC,MAC5B,kBAAIP,UAAU,QAAQL,IAAKA,YAAF,MAIpBU,IAEP,mBAAKV,IAAKA,YAAF,MACN,qBAAOK,UAAU,mBAAoBU,IAAOR,EAAGS,oBAAoBC,OAAO,QAG1ET,EAAGU,MACH,mBAAKb,UAAU,UAAUL,IAAKA,YAAF,MAC1B,mBAAKK,UAAU,wBACb,sBAAQA,UAAU,SAChB,mBAAKc,IAAMX,EAAGE,MAAQU,WAAWZ,EAAGU,MAAQb,UAAU,eAG1D,mBAAKA,UAAU,UACb,mBAAKA,UAAU,UAAUgB,wBAAyB,CAAEC,OAAQf,EAAGgB,aAInE,mBAAKlB,UAAU,UAAUgB,wBAAyB,CAAEC,OAAQf,EAAGgB,gBAMvEnB,K,6JClDD,IAAMoB,EAAQ,YA4DNC,UAnCC,SAAC,GAA2D,IAAzDC,EAAyD,EAAzDA,KACXC,EADoE,EAAnDC,YACQC,YACzBC,EAAaJ,EAAKK,kBAAkBD,WACpCE,EAAYC,KAAKC,KAAKJ,EAAa,GAEzC,OACE,YAACK,EAAD,CACEjC,MAAQwB,EAAKK,kBAAkB7B,MAC/BE,WACE,mBAAKC,UAAU,yBAAyB+B,KAAK,aAAaC,aAAW,cACjEV,EAAa,EACb,YAAC,IAAD,CACEtB,UAAU,sBACVS,GAAKa,EAAa,EAAb,UAA0BA,EAAa,GAAM,KAFpD,KAKA,sBAAQW,UAAQ,EAACjC,UAAU,uBAA3B,KAEF,oBAAMA,UAAU,kBAAkBL,IAAKA,YAAF,MAArC,QACS2B,EAAWY,iBADpB,OAC4CP,EAAUO,kBAEpDZ,EAAaK,EACb,YAAC,IAAD,CACE3B,UAAU,kBACVS,GAAE,UAAYa,EAAa,IAF7B,KAKA,sBAAQW,UAAQ,EAACjC,UAAU,mBAA3B,U,qBC1DZ,IAAsBmC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGElD,IAAMmD,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-templates-listing-tsx-2484e14a265db28b47dd.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport moment from 'moment'\nimport { Link } from 'gatsby'\n\nconst my1 = css`\n  margin-top: 1em;\n  margin-bottom: 1em;\n`\n\nconst App = ({ nodes, tagName, pagination }: {\n  nodes: any[]\n  tagName?: string\n  pagination: any\n}) => (\n  <div className=\"columns\">\n    <div className=\"column is-three-fifths-desktop is-offset-one-fifth-desktop\">\n      { tagName ? (\n        <h1 className=\"title\" css={my1}>{ tagName }</h1>\n      ) : null }\n      { nodes.map((el) => {\n        const fm = el.frontmatter\n        const title = fm.title || el.fields.slug\n\n        return (\n          <div key={ title } className=\"card\" css={my1}>\n            <div className=\"card-content\">\n              <Link to={ `/posts${el.fields.slug}` }>\n                <h2 className=\"title\" css={css`\n                :hover {\n                  color: blue;\n                }\n                `}>{ title }</h2>\n              </Link>\n              <div css={css`height: 1.5em; margin-bottom: 2em;`}>\n                <small className=\"is-pulled-right\">{ moment(el.correctedDateEpoch).format('LL') }</small>\n              </div>\n\n              { fm.image ? (\n                <div className=\"columns\" css={css`flex-direction: row-reverse;`}>\n                  <div className=\"column is-two-fifths\">\n                    <figure className=\"image\">\n                      <img alt={ fm.title } data-src={ fm.image } className=\"lazyload\" />\n                    </figure>\n                  </div>\n                  <div className=\"column\">\n                    <div className=\"content\" dangerouslySetInnerHTML={{ __html: el.excerpt }} />\n                  </div>\n                </div>\n              ) : (\n                <div className=\"content\" dangerouslySetInnerHTML={{ __html: el.excerpt }} />\n              ) }\n            </div>\n          </div>\n        )\n      }) }\n      { pagination }\n    </div>\n  </div>\n)\n\nexport default App\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { graphql, Link } from 'gatsby'\n\nimport ListingLayout from '../layouts/ListingLayout'\n\nexport const query = graphql`\n  query PagedListing($limit: Int!, $skip: Int!) {\n    allMarkdownRemark(\n      sort: {fields: frontmatter___date, order: DESC},\n      filter: {isPast: {eq: true}},\n      limit: $limit,\n      skip: $skip\n    ) {\n      nodes {\n        excerpt(truncate: true, format: HTML)\n        frontmatter {\n          title\n          tag\n          image\n        }\n        fields {\n          slug\n        }\n        correctedDateEpoch\n      }\n      totalCount\n    }\n  }\n`\n\nconst Listing = ({ data, pageContext }: { data: any; pageContext: any }) => {\n  const pageNumber = pageContext.currentPage\n  const totalCount = data.allMarkdownRemark.totalCount\n  const pageCount = Math.ceil(totalCount / 5)\n\n  return (\n    <ListingLayout\n      nodes={ data.allMarkdownRemark.nodes }\n      pagination={ (\n        <nav className=\"pagination is-centered\" role=\"navigation\" aria-label=\"pagination\">\n          { pageNumber > 1 ? (\n            <Link\n              className=\"pagination-previous\"\n              to={ pageNumber > 2 ? `/page/${pageNumber - 1}` : '/' }\n            >&lt;</Link>\n          ) : (\n            <button disabled className=\"pagination-previous\">&lt;</button>\n          ) }\n          <span className=\"pagination-list\" css={css`width: 60vw;`}>\n            Page { pageNumber.toLocaleString() } of { pageCount.toLocaleString() }\n          </span>\n          { pageNumber < pageCount ? (\n            <Link\n              className=\"pagination-next\"\n              to={ `/page/${pageNumber + 1}` }\n            >&gt;</Link>\n          ) : (\n            <button disabled className=\"pagination-next\">&gt;</button>\n          ) }\n        </nav>\n      ) }\n    />\n  )\n}\n\nexport default Listing\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}